; KCPSM3 Program - NexysTerm
; Matt Sickler - 2012

; Port Definitions
P_SWITCH        .EQU  0x01
P_BTN           .EQU  0x02
P_LED           .EQU  0x03
P_SSD1          .EQU  0x04
P_SSD2          .EQU  0x05
P_SSD3          .EQU  0x06
P_SSD4          .EQU  0x07
P_SRL_STATUS        .EQU  0x11
P_SRL_READ          .EQU  0x12
P_SRL_WRITE         .EQU  0x13
P_TRAM_ADDR_HIGH    .EQU  0x14
P_TRAM_ADDR_LOW     .EQU  0x15
P_TRAM_DATA_COLOR   .EQU  0x16
P_TRAM_DATA_CHAR    .EQU  0x17
P_PS2_STATUS        .EQU  0x18
P_PS2_DATA          .EQU  0x19
P_DSRL_STATUS       .EQU  0x1A
P_DSRL_READ         .EQU  0x1B
P_DSRL_WRITE        .EQU  0x1C

; Serial Port Status Reg Bits
P_SRL_STATUS_DATA_PRESENT   .EQU  0x01
P_SRL_STATUS_RD_BUFF_HALF   .EQU  0x02
P_SRL_STATUS_RD_BUFF_FULL   .EQU  0x04
P_SRL_STATUS_WR_BUFF_HALF   .EQU  0x10
P_SRL_STATUS_WR_BUFF_FULL   .EQU  0x20


;
; Initialization
;
cold_start:
    LOAD s1, 0x00
    LOAD s4, 0x01
    OUTPUT s1, P_TRAM_ADDR_HIGH
    OUTPUT s1, P_TRAM_ADDR_LOW
    OUTPUT s1, P_TRAM_DATA_CHAR
    OUTPUT s1, P_TRAM_DATA_COLOR
    OUTPUT s1, P_SSD1
    OUTPUT s1, P_SSD2
    OUTPUT s1, P_SSD3
    OUTPUT s1, P_SSD4
    OUTPUT s1, P_LED
    
main_loop:
    INPUT s1, P_SRL_STATUS
    ;OUTPUT s1, P_LED
    TEST s1, P_SRL_STATUS_DATA_PRESENT
    CALL NZ, rd_srl_data
    
    INPUT s1, P_DSRL_STATUS
    OUTPUT s1, P_LED
    TEST s1, P_SRL_STATUS_DATA_PRESENT
    CALL NZ, rd_dsrl_data
    
    INPUT s1, P_PS2_STATUS
    TEST s1, P_SRL_STATUS_DATA_PRESENT
    CALL NZ, rd_ps2_data
    
    INPUT s1, P_SWITCH
    INPUT s2, P_BTN
    
b1: TEST s2, 0x08
    JUMP Z, b2
    OUTPUT s1, P_TRAM_ADDR_HIGH
    
b2: TEST s2, 0x04
    JUMP Z, b3
    OUTPUT s1, P_TRAM_ADDR_LOW
    
b3: TEST s2, 0x02
    JUMP Z, b4
    OUTPUT s1, P_TRAM_DATA_COLOR
    
b4: TEST s2, 0x01
    JUMP Z, b5
    OUTPUT s1, P_TRAM_DATA_CHAR
    
    ; send Switch values out the serial port (when btn_1 pushed)
    LOAD sA, s1
    CALL bin2hex
    LOAD sA, sC
    CALL send_serial
    LOAD sA, sB
    CALL send_serial
    LOAD sA, 0x20
    CALL send_serial


b5: JUMP main_loop

rd_dsrl_data:
    INPUT s8, P_DSRL_READ
    OUTPUT s8, P_DSRL_WRITE
    RETURN

rd_srl_data:
    INPUT s8, P_SRL_READ
    TEST s4, 0x01
    JUMP NZ, d1
    TEST s4, 0x02
    JUMP NZ, d2
    TEST s4, 0x04
    JUMP NZ, d3
    TEST s4, 0x08
    JUMP NZ, d4
    OUTPUT s8, P_SRL_WRITE
dr: RETURN

d1: OUTPUT s8, P_TRAM_ADDR_HIGH
    LOAD s4, 0x02
    JUMP dr
d2: OUTPUT s8, P_TRAM_ADDR_LOW
    LOAD s4, 0x04
    JUMP dr
d3: OUTPUT s8, P_TRAM_DATA_COLOR
    LOAD s4, 0x08
    JUMP dr
d4: OUTPUT s8, P_TRAM_DATA_CHAR
    LOAD s4, 0x01
    JUMP dr

rd_ps2_data:
    INPUT sA, P_PS2_DATA
    ;OUTPUT sA, P_SRL_WRITE
    CALL bin2hex
    LOAD sA, sC
    CALL send_serial
    LOAD sA, sB
    CALL send_serial
    RETURN


; bin2hex
; Arguments:
;   sA  the binary value to convert
; Returns:
;   sB  the first (most significant) hex char
;   sC  the second (least significant) hex char
; Uses:
bin2hex:
    LOAD sB, sA
    LOAD sC, sA
    AND sB, 0x0F
    SR0 sC
    SR0 sC
    SR0 sC
    SR0 sC

    COMPARE sB, 0x0A
    JUMP C, bin2hex_skipB
    ADD sB, 0x07
bin2hex_skipB:
    ADD sB, 0x30

    COMPARE sC, 0x0A
    JUMP C, bin2hex_skipC
    ADD sC, 0x07
bin2hex_skipC:
    ADD sC, 0x30
    
    RETURN

; send_serial
; Arguments
;   sA  the byte to send
; Returns:
; Uses:
;   sF
send_serial:
    INPUT sF, P_SRL_STATUS
    TEST sF, P_SRL_STATUS_WR_BUFF_FULL
    JUMP NZ, send_serial ; wait for the serial buffer to be not completely full
    OUTPUT sA, P_SRL_WRITE
    RETURN


