    ; KCPSM3 Program - NexysTerm
    ; Matt Sickler - 2012
    
    ; Port Definitions
    CONSTANT  P_SWITCH, 01
    CONSTANT  P_BTN, 02
    CONSTANT  P_LED, 03
    CONSTANT  P_SSD1, 04
    CONSTANT  P_SSD2, 05
    CONSTANT  P_SSD3, 06
    CONSTANT  P_SSD4, 07
    
    CONSTANT  P_SRL_STATUS, 11
    CONSTANT    P_SRL_STATUS_DATA_PRESENT, 01
    CONSTANT    P_SRL_STATUS_RD_BUFF_HALF, 02
    CONSTANT    P_SRL_STATUS_RD_BUFF_FULL, 04
    CONSTANT    P_SRL_STATUS_WR_BUFF_HALF, 10
    CONSTANT    P_SRL_STATUS_WR_BUFF_FULL, 20
    CONSTANT  P_SRL_READ, 12
    CONSTANT  P_SRL_WRITE, 13
    CONSTANT  P_TRAM_ADDR_HIGH,  14
    CONSTANT  P_TRAM_ADDR_LOW,   15
    CONSTANT  P_TRAM_DATA_COLOR, 16
    CONSTANT  P_TRAM_DATA_CHAR,  17
    CONSTANT  P_PS2_STATUS, 18
    CONSTANT  P_PS2_DATA,   19
    
    ; Register names
    ; s0                            s8  
    ; s1                            s9  
    ; s2                            sA  
    ; s3                            sB  
    ; s4                            sC  
    ; s5                            sD  
    ; s6                            sE  
    ; s7                            sF  
    
    
    ; Scratchpad Memory Locations
    
    
    ;
    ; Initialization
    ;
cold_start:
    LOAD s1, 00
    LOAD s4, 01
    OUTPUT s1, P_TRAM_ADDR_HIGH
    OUTPUT s1, P_TRAM_ADDR_LOW
    OUTPUT s1, P_TRAM_DATA_CHAR
    OUTPUT s1, P_TRAM_DATA_COLOR
    OUTPUT s1, P_SSD1
    OUTPUT s1, P_SSD2
    OUTPUT s1, P_SSD3
    OUTPUT s1, P_SSD4
    OUTPUT s1, P_LED
    
main_loop:
    INPUT s1, P_SRL_STATUS
    OUTPUT s1, P_LED
    
    TEST s1, P_SRL_STATUS_DATA_PRESENT
    CALL NZ, rd_srl_data
    
    INPUT s1, P_PS2_STATUS
    TEST s1, P_SRL_STATUS_DATA_PRESENT
    CALL NZ, rd_ps2_data
    
    INPUT s1, P_SWITCH
    INPUT s2, P_BTN
    
b1: TEST s2, 08
    JUMP Z, b2
    OUTPUT s1, P_TRAM_ADDR_HIGH
    
b2: TEST s2, 04
    JUMP Z, b3
    OUTPUT s1, P_TRAM_ADDR_LOW
    
b3: TEST s2, 02
    JUMP Z, b4
    OUTPUT s1, P_TRAM_DATA_COLOR
    
b4: TEST s2, 01
    JUMP Z, b5
    OUTPUT s1, P_TRAM_DATA_CHAR
    
    ; send Switch values out the serial port (when btn_1 pushed)
    LOAD sA, s1
    CALL bin2hex
    LOAD sA, sC
    CALL send_serial
    LOAD sA, sB
    CALL send_serial
    LOAD sA, 20
    CALL send_serial


b5: JUMP main_loop

sw2tramH:
   

rd_srl_data:
    INPUT s8, P_SRL_READ
    TEST s4, 01
    JUMP NZ, d1
    TEST s4, 02
    JUMP NZ, d2
    TEST s4, 04
    JUMP NZ, d3
    TEST s4, 08
    JUMP NZ, d4
    ;OUTPUT s8, P_SRL_WRITE
dr: RETURN

d1: OUTPUT s8, P_TRAM_ADDR_HIGH
    LOAD s4, 02
    JUMP dr
d2: OUTPUT s8, P_TRAM_ADDR_LOW
    LOAD s4, 04
    JUMP dr
d3: OUTPUT s8, P_TRAM_DATA_COLOR
    LOAD s4, 08
    JUMP dr
d4: OUTPUT s8, P_TRAM_DATA_CHAR
    LOAD s4, 01
    JUMP dr

rd_ps2_data:
    INPUT sA, P_PS2_DATA
    ;OUTPUT sA, P_SRL_WRITE
    CALL bin2hex
    LOAD sA, sC
    CALL send_serial
    LOAD sA, sB
    CALL send_serial
    RETURN


; bin2hex
; Arguments:
;   sA  the binary value to convert
; Returns:
;   sB  the first (most significant) hex char
;   sC  the second (least significant) hex char
; Uses:
bin2hex:
    LOAD sB, sA
    LOAD sC, sA
    AND sB, 0F
    SR0 sC
    SR0 sC
    SR0 sC
    SR0 sC

    COMPARE sB, 0a
    JUMP C, bin2hex_skipB
    ADD sB, 07
bin2hex_skipB:
    ADD sB, 30

    COMPARE sC, 0a
    JUMP C, bin2hex_skipC
    ADD sC, 07
bin2hex_skipC:
    ADD sC, 30
    
    RETURN

; send_serial
; Arguments
;   sA  the byte to send
; Returns:
; Uses:
;   sF
send_serial:
    INPUT sF, P_SRL_STATUS
    TEST sF, P_SRL_STATUS_WR_BUFF_FULL
    JUMP NZ, send_serial ; wait for the serial buffer to be not completely full
    OUTPUT sA, P_SRL_WRITE
    RETURN


